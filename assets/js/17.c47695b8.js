(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{569:function(e,t,D){"use strict";D.r(t);var r=D(17),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,D=e._self._c||t;return D("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[D("p",[e._v("在实际的项目中，我们可能随时面对各种不同的需求，它的各个方面的要素决定了我们所采用的开发模式。")]),e._v(" "),D("p",[e._v("比如，它的复杂度如何？所有的需求是否足够清晰？开发人员对相关的业务是否足够了解？项目的工期是否合理？种种问题，不一而足。这也决定了我们可能面对不同的需求可能需要采用不同的开发模式。下面大概说几种。")]),e._v(" "),D("h3",{attrs:{id:"_1-tdd"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_1-tdd"}},[e._v("#")]),e._v(" 1. TDD")]),e._v(" "),D("ul",[D("li",[D("p",[e._v("TDD 指的是 Test Drive Development，很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。这一点和敏捷开发有类似之处。")])]),e._v(" "),D("li",[D("p",[e._v("TDD 的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的 bug，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆 bug，或者存在设计问题，或者更严重的逻辑问题，而 TDD 正好可以帮助我们尽量减少类似事件的发生。而且现在大行其道的一些模式对 TDD 的支持都非常不错，比如 MVC 和 MVP 等。")])]),e._v(" "),D("li",[D("p",[e._v("但是并不是所有的项目都适合 TDD 这种模式的，我觉得必须具备以下几个条件。")])]),e._v(" "),D("li",[D("p",[e._v("首先，项目的需求必须足够清晰，而且程序员对整个需求有足够的了解，如果这个条件不满足，那么执行的过程中难免失控。当然，要达到这个目标也是需要做一定功课的，这要求我们前期的需求分析以及 HLD 和 LLD 都要做得足够的细致和完善。")])]),e._v(" "),D("li",[D("p",[e._v("其次，取决于项目的复杂度和依赖性，对于一个业务模型及其复杂、内部模块之间的相互依赖性非常强的项目，采用 TDD 反而会得不尝失，这会导致程序员在拆分接口和写测试代码的时候工作量非常大。另外，由于模块之间的依赖性太强，我们在写测试代码的时候可能不采取一些桥接模式来实现，这样势必加大了程序员的工作量。")])])]),e._v(" "),D("h3",{attrs:{id:"_2-bdd"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_2-bdd"}},[e._v("#")]),e._v(" 2. BDD")]),e._v(" "),D("ul",[D("li",[D("p",[e._v("BDD 指的是 Behavior Drive Development，也就是行为驱动开发。这里的 B 并非指的是 Business，实际上 BDD 可以看作是对 TDD 的一种补充，当然你也可以把它看作 TDD 的一个分支。因为在 TDD 中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能。BDD 将这一部分简单和自然化，用自然语言来描述，让开发、测试、BA 以及客户都能在这个基础上达成一致。因为测试优先的概念并不是每个人都能接受的，可能有人觉得系统太复杂而难以测试，有人认为不存在的东西无法测试。所以，我们在这里试图转换一种观念，那便是考虑它的行为，也就是说它应该如何运行，然后抽象出能达成共识的规范。如果你用过 JBehave 之类的 BDD 框架，你将会更好的理解其中具体的流程。")])]),e._v(" "),D("li",[D("p",[e._v("另外，关于 TDD 和 BDD 之间的关系，还可以参考这篇文章: "),D("a",{attrs:{href:"https://www.infoq.cn/article/virtual-panel-tdd-bdd/",target:"_blank",rel:"noopener noreferrer"}},[e._v("虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发"),D("OutboundLink")],1)])])]),e._v(" "),D("h3",{attrs:{id:"_3-ddd"}},[D("a",{staticClass:"header-anchor",attrs:{href:"#_3-ddd"}},[e._v("#")]),e._v(" 3. DDD")]),e._v(" "),D("ul",[D("li",[e._v("DDD 指的是 Domain Drive Design，也就是领域驱动开发。这是一种非常好的思想，在我们刚开始学习程序，甚至刚开始学习三层架构的时候，我们曾经面临过很多疑惑，比如如何来实现我们的数据层？后来我们开始学习 MVC，MVP 等架构，如何设计 Model 层又成了我们的新问题。我们见过太多这种情况，Model 变成了单纯的数据容器，也就是我们经常说的贫血模式。DDD 实际上也是建立在这个基础之上，因为它关注的是 Service 层的设计，着重于业务的实现，因此不可避免的以贫血模式为基础而存在。但是它最大的特别是将分析和设计结合起来，不再使他们处于分裂的状态，这对于我们正确完整的实现客户的需求，以及建立一个具有业务伸缩性的模型，是有很大帮助的。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);