(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{575:function(t,s,e){"use strict";e.r(s);var a=e(17),o=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Event Loop 翻译出来就是事件循环，可以理解为实现异步的一种方式")]),t._v(" "),e("h2",{attrs:{id:"定义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),e("hr"),t._v(" "),e("p",[t._v("我们来看看"),e("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop",target:"_blank",rel:"noopener noreferrer"}},[t._v("event loop"),e("OutboundLink")],1),t._v("在HTML Standard中的定义章节：")]),t._v(" "),e("p",[e("code",[t._v("为了协调事件，用户交互，脚本，渲染，网络等，用户代理必须使用本节所述的event loop")])]),t._v(" "),e("p",[e("strong",[t._v("事件，用户交互，脚本，渲染，网络")]),t._v("这些都是我们所熟悉的东西，他们都是由event loop协调的。触发一个click事件，进行一次ajax请求，背后都有event loop在运作。")]),t._v(" "),e("h2",{attrs:{id:"task-macrotask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#task-macrotask"}},[t._v("#")]),t._v(" task (macrotask)")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("code",[t._v("一个event loop有一个或者多个task队列。")])]),t._v(" "),e("p",[e("code",[t._v("当用户代理安排一个任务，必须将该任务增加到相应的event loop的一个tsak队列中。")])]),t._v(" "),e("p",[e("code",[t._v("每一个task都来源于指定的任务源，比如可以为鼠标、键盘事件提供一个task队列，其他事件又是一个单独的队列。可以为鼠标、键盘事件分配更多的时间，保证交互的流畅。")])]),t._v(" "),e("p",[t._v("task也被称为macrotask，task队列还是比较好理解的，就是一个先进先出的队列，由指定的任务源去提供任务。")]),t._v(" "),e("h3",{attrs:{id:"哪些是task任务源呢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#哪些是task任务源呢"}},[t._v("#")]),t._v(" 哪些是task任务源呢？")]),t._v(" "),e("p",[t._v("规范在"),e("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#generic-task-sources",target:"_blank",rel:"noopener noreferrer"}},[t._v("Generic task sources"),e("OutboundLink")],1),t._v("中有提及：")]),t._v(" "),e("blockquote",[e("p",[e("b",[t._v("DOM操作任务源：")]),e("br"),t._v(" 此任务源被用来相应dom操作，例如一个元素以非阻塞的方式插入文档。")])]),t._v(" "),e("blockquote",[e("p",[e("b",[t._v("用户交互任务源：")]),e("br"),t._v("此任务源用于对用户交互作出反应，例如键盘或鼠标输入。响应用户操作的事件（例如click）必须使用task队列。")])]),t._v(" "),e("blockquote",[e("p",[e("b",[t._v("网络任务源：")]),e("br"),t._v("网络任务源被用来响应网络活动。")])]),t._v(" "),e("blockquote",[e("p",[e("b",[t._v("history traversal任务源：")]),e("br"),t._v("当调用history.back()等类似的api时，将任务插进task队列。")])]),t._v(" "),e("ul",[e("li",[t._v("总结来说macrotask有:\nsetTimeout、setInterval、setImmediate、I/O、UI rendering")])]),t._v(" "),e("h2",{attrs:{id:"microtask"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#microtask"}},[t._v("#")]),t._v(" microtask")]),t._v(" "),e("hr"),t._v(" "),e("p",[e("code",[t._v("每一个event loop都有一个microtask队列，一个microtask会被排进microtask队列而不是task队列。")])]),t._v(" "),e("p",[e("code",[t._v("有两种microtasks：分别是solitary callback microtasks和compound microtasks。规范值只覆盖solitary callback microtasks")])]),t._v(" "),e("p",[e("code",[t._v("如果在初期执行时，")]),e("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/webappapis.html#spin-the-event-loop",target:"_blank",rel:"noopener noreferrer"}},[t._v("spin the event loop"),e("OutboundLink")],1),e("code",[t._v("，microtasks有可能被移动到常规的task队列，在这种情况下，microtasks任务源会被task任务源所用。通常情况，task任务源和microtasks是不相关的。")])]),t._v(" "),e("p",[t._v("microtask 队列和task(macrotask)队列有些相似，都是先进先出的队列，由指定的任务源去提供任务，不同的是一个event loop里只有一个microtask 队列。")]),t._v(" "),e("p",[t._v("HTML Standard没有具体指明哪些是microtask任务源，通常认为是microtask任务源有:process.nextTick、promises、Object.observe、MutationObserver")]),t._v(" "),e("p",[e("b",[t._v(" NOTE: ")]),e("br")]),t._v(" "),e("p",[e("code",[t._v("Promise的定义在 ECMAScript规范而不是在HTML规范中，但是ECMAScript规范中有一个jobs的概念和microtasks很相似。在Promises/A+规范的Notes 3.1中提及了promise的then方法可以采用“宏任务（macro-task）”机制或者“微任务（micro-task）”机制来实现。所以开头提及的promise在不同浏览器的差异正源于此，有的浏览器将then放入了macro-task队列，有的放入了micro-task 队列。一个普遍的共识是promises属于microtasks队列。")])]),t._v(" "),e("h3",{attrs:{id:"举个例子🌰"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#举个例子🌰"}},[t._v("#")]),t._v(" 举个例子🌰")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\nconsole.log('script start');\n\nsetTimeout(function () {\n  console.log('setTimeout');\n}, 0);\n\nPromise.resolve()\n  .then(function () {\n    console.log('promise1');\n  })\n  .then(function () {\n    console.log('promise2');\n  });\n\nconsole.log('script end');\n\n")])])]),e("ul",[e("li",[t._v("猜猜上面这段代码的输出结果")])]),t._v(" "),e("p",[t._v("script start、script end、promise1、promise2、setTimeout")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://s3.bmp.ovh/imgs/2022/02/910f8b323b4b3178.gif",alt:"image.png"}})])])}),[],!1,null,null,null);s.default=o.exports}}]);