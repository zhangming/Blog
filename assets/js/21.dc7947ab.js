(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{573:function(e,r,t){"use strict";t.r(r);var a=t(17),n=Object(a.a)({},(function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"defineproperty-与-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defineproperty-与-proxy"}},[e._v("#")]),e._v(" defineProperty 与 Proxy")]),e._v(" "),t("h3",{attrs:{id:"defineproperty"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#defineproperty"}},[e._v("#")]),e._v(" defineProperty")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("ES5 提供了 Object.defineProperty 方法，该方法可以在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。")]),e._v(" "),t("h4",{attrs:{id:"语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("Object.defineProperty(obj, prop, descriptor)\n")])])]),t("h4",{attrs:{id:"参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("obj: 要在其上定义属性的对象。\n\nprop: 要定义或修改的属性的名称。\n\ndescriptor: 将被定义或修改的属性的描述符。(value,configurable,enumerable,writable,get,set)\n")])])]),t("h4",{attrs:{id:"举例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[e._v("#")]),e._v(" 举例")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = {};\nObject.defineProperty(obj, "num", {\n    value : 1,\n    writable : true,\n    enumerable : true,\n    configurable : true\n});\n//  对象 obj 拥有属性 num，值为 1\n\n')])])]),t("ul",[t("li",[e._v("函数的第三个参数 descriptor 所表示的属性描述符有两种形式：数据描述符和存取描述符。\n"),t("ul",[t("li",[e._v("两者均具有以下两种键值：configurable，enumerable")]),e._v(" "),t("li",[e._v("数据描述符同时具有以下可选键值：value，writable")]),e._v(" "),t("li",[e._v("存取描述符同时具有以下可选键值：get，set")])])]),e._v(" "),t("li",[e._v("值得注意的是：属性描述符必须是数据描述符或者存取描述符两种形式之一，不能同时是两者")])]),e._v(" "),t("p",[t("strong",[e._v("这就意味着你可以：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Object.defineProperty({}, "num", {\n    value: 1,\n    writable: true,\n    enumerable: true,\n    configurable: true\n});\n\n')])])]),t("p",[t("strong",[e._v("也可以：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Object.defineProperty({}, "num", {\n    value: 1,\n    writable: true,\n    enumerable: true,\n    configurable: true\n});\n\n')])])]),t("p",[t("strong",[e._v("但是不可以：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 报错\nObject.defineProperty({}, "num", {\n    value: 1,\n    get: function() {\n        return 1;\n    }\n});\n\n')])])]),t("p",[t("strong",[e._v("此外，所有的属性描述符都是非必须的，但是 descriptor 这个字段是必须的，如果不进行任何配置，你可以这样：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var obj = Object.defineProperty({}, "num", {});\nconsole.log(obj.num); // undefined\n\n')])])]),t("h4",{attrs:{id:"proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#proxy"}},[e._v("#")]),e._v(" Proxy")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，ES6 原生提供 Proxy 构造函数，用来生成 Proxy 实例。我们来看看它的语法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var proxy = new Proxy(target, handler);\n")])])]),t("p",[e._v("proxy 对象的所有用法，都是上面这种形式，不同的只是 handler 参数的写法。其中，new Proxy()表示生成一个 Proxy 实例，target 参数表示所要拦截的目标对象，handler 参数也是一个对象，用来定制拦截行为。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var proxy = new Proxy({}, {\n    get: function(obj, prop,receiver) {\n        console.log('设置 get 操作')\n        return obj[prop];\n    },\n    set: function(obj, prop, value) {\n        console.log('设置 set 操作')\n        obj[prop] = value;\n    }\n});\n\nproxy.time = 35; // 设置 set 操作\n\nconsole.log(proxy.time); // 设置 get 操作 // 35\n\n")])])]),t("p",[t("a",{attrs:{href:"https://es6.ruanyifeng.com/#docs/proxy#Proxy-%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[e._v("proxy 13 种实例方法参考"),t("OutboundLink")],1)]),e._v(" "),t("h3",{attrs:{id:"reflect-与-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reflect-与-proxy"}},[e._v("#")]),e._v(" Reflect 与 Proxy")]),e._v(" "),t("p",[e._v("Proxy 可以对目标对象的读取、函数调用等操作进行拦截，然后进行操作处理。它不直接操作对象，而是像代理模式，通过对象的代理对象进行操作，在进行这些操作时，可以添加一些需要的额外操作。")]),e._v(" "),t("p",[e._v("Reflect 可以用于获取目标对象的行为，它与 Object 类似，但是更易读，为操作对象提供了一种更优雅的方式。它的方法与 Proxy 是对应的")])])}),[],!1,null,null,null);r.default=n.exports}}]);