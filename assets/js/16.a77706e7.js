(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{566:function(a,e,t){"use strict";t.r(e);var l=t(17),v=Object(l.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("ul",[t("li",[a._v("Map(映射类型)及 WeakMap。映射类型在计算机科学中定义属于关联数组，而关联数组的定义是若干键值对(Key/Value Pair)组成的集合,其中每个 Key 值都只能出现一次。")]),a._v(" "),t("li",[a._v("本篇文章将从以下方面进行介绍：\n"),t("ul",[t("li",[a._v("Map 代码示例")]),a._v(" "),t("li",[a._v("Map 常用方法示例")]),a._v(" "),t("li",[a._v("Map 与 Object 的区别")]),a._v(" "),t("li",[a._v("weakMap 介绍")])])])]),a._v(" "),t("h3",{attrs:{id:"map-代码示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-代码示例"}},[a._v("#")]),a._v(" Map 代码示例")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("Map 的键和值可以是任何数据类型，键值对按照插入顺序排列，如果插入重复的键值，后面的键值会覆盖前者，下段代码是个简单示例，演示了 Map 的一些用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let map = new Map();\nlet o = {n: 1};\nmap.set(o, "A"); //add\nmap.set("2", 9);\nconsole.log(map.has("2")); //check if key exists\nconsole.log(map.get(o)); //retrieve value associated with key\nconsole.log(...map);\nconsole.log(map);\nmap.delete("2"); //delete key and associated value\nmap.clear(); //delete everything\n//create a map from iterable object\nlet map_1 = new Map([[1, 2], [4, 5]]);\nconsole.log(map_1.size); //number of keys\n')])])]),t("p",[a._v("上述代码将会输出")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("true\nA\n[ { n: 1 }, 'A' ] [ '2', 9 ]\nMap { { n: 1 } => 'A', '2' => 9 }\n2\n")])])]),t("p",[a._v("从上述代码中，我们可以看出使用 new Map()语法进行声明，map 键的类型可以使用任意对象作为键（字符串，object 类型,functions），我们直接二维数组键值对的形传入到构建函数中，第一项为键，后一项为值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const map=new Map([['foo',1],['foo',2]])\nconsole.log(map);\nconsole.log(map.get('foo'))\n")])])]),t("p",[a._v("上述代码将会输出:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Map { 'foo' => 2 }\n2\n")])])]),t("p",[a._v("上述代码我们可以看出，如果存在相同的键，则会按照 FIFO（First in First Out,先进先出）原则，后面的键值信息会覆盖前面的键值信息。")]),a._v(" "),t("h3",{attrs:{id:"map-常用方法示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-常用方法示例"}},[a._v("#")]),a._v(" Map 常用方法示例")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("map.set(key,value) 添加键值对到映射中")]),a._v(" "),t("p",[a._v("map.get(key) 获取映射中某一个键的对应值")]),a._v(" "),t("p",[a._v("map.delete(key) 将某一键值对移除映射")]),a._v(" "),t("p",[a._v("map.clear() 清空映射中所有键值对")]),a._v(" "),t("p",[a._v("map.entries() 返回一个以二元数组（键值对）作为元素的数组")]),a._v(" "),t("p",[a._v("map.has(key) 检查映射中是否包含某一键值对")]),a._v(" "),t("p",[a._v("map.keys() 返回一个当前映射中所有键作为元素的可迭代对象")]),a._v(" "),t("p",[a._v("map.values() 返回一个当前映射中所有值作为元素的可迭代对象")]),a._v(" "),t("p",[a._v("map.size 映射中键值对的数量")]),a._v(" "),t("h3",{attrs:{id:"map-与-object-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-与-object-的区别"}},[a._v("#")]),a._v(" Map 与 Object 的区别")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("共同点：")]),a._v(" "),t("ul",[t("li",[a._v("存储键值对")]),a._v(" "),t("li",[a._v("遍历所有的键值对")]),a._v(" "),t("li",[a._v("检查是否包含指定的键值对")]),a._v(" "),t("li",[a._v("使用字符串作为键")]),a._v(" "),t("li",[a._v("使用 Symbol 作为键")])])]),a._v(" "),t("li",[t("p",[a._v("差异（Map 独有）：")]),a._v(" "),t("ul",[t("li",[a._v("使用任意对象作为键")]),a._v(" "),t("li",[a._v("可以很方便的得知键值对的数量")]),a._v(" "),t("li",[a._v("Map 不能被序列化（JSON.stringfly）")])])])]),a._v(" "),t("h3",{attrs:{id:"weakmap-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-介绍"}},[a._v("#")]),a._v(" weakMap 介绍")]),a._v(" "),t("ul",[t("li",[a._v('它对于值的引用都是不计入垃圾回收机制的，所以名字里面才会有一个"Weak"，表示这是弱引用（对对象的弱引用是指当该对象应该被 GC 回收时不会阻止 GC 的回收行为）。\n'),t("ul",[t("li",[a._v("Map 的键可以是任意类型，WeakMap 只接受对象作为键（null 除外），不接受其他类型的值作为键")]),a._v(" "),t("li",[a._v("Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键； WeakMap 的键是弱引用，键所指- 向的对象可以被垃圾回收，此时键是无效的")]),a._v(" "),t("li",[a._v("Map 可以被遍历， WeakMap 不能被遍历")])])])])])}),[],!1,null,null,null);e.default=v.exports}}]);