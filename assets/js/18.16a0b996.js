(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{572:function(a,e,r){"use strict";r.r(e);var t=r(17),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,r=a._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h1",{attrs:{id:"基础知识学习"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础知识学习"}},[a._v("#")]),a._v(" 基础知识学习")]),a._v(" "),r("h3",{attrs:{id:"webgl-绘制一个点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webgl-绘制一个点"}},[a._v("#")]),a._v(" WebGL 绘制一个点")]),a._v(" "),r("h4",{attrs:{id:"关键词"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关键词"}},[a._v("#")]),a._v(" 关键词")]),a._v(" "),r("ul",[r("li",[a._v("超文本语言 HTML")]),a._v(" "),r("li",[a._v("脚本语言 Javascript")]),a._v(" "),r("li",[a._v("Canvas 画布")]),a._v(" "),r("li",[a._v("着色器语言 GLSL ES")]),a._v(" "),r("li",[a._v("WebGL API")])]),a._v(" "),r("p",[a._v("Canvas 对象方法.getContext()\nHTML 的 Canvas 元素提供了 2D 和 3D 绘图两种功能，平时程序员之间交流所说的 Canvas 一词就是指 Canvas 的 2D 绘图功能，通过 Canvas 元素实现的 3D 绘图功能，也就是所谓的 WebGL，或者说 WebGL 依赖于 Canvas 元素实现。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//通过方法getContext()获取Canvas 2D绘图上下文\nvar c =canvas.getContext('2d');\nc.moveTo(0,0);//直线起点坐标\nc.lineTo(50,50);//直线第2个点坐标\nc.lineTo(0,100);//直线第3个点坐标\nc.stroke();//把点连成直线绘制出来\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//通过方法getContext()获取WebGL上下文\nvar gl=canvas.getContext('webgl');\n...\n//调用WebGL API绘制渲染方法drawArrays\ngl.drawArrays(gl.POINTS,0,1);\n...\n")])])]),r("h3",{attrs:{id:"着色器语言-glsl-es"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#着色器语言-glsl-es"}},[a._v("#")]),a._v(" 着色器语言 GLSL ES")]),a._v(" "),r("p",[a._v("下面代码中的两个字符串 vertexShaderSource 和 fragShaderSource 是 WebGL 的着色器代码，着色器代码通过着色器语言 GLSL ES 编写，对于前端工程来说学习 WebGL，还需要学习一门新的语言着色器语言 GLSL ES。关于着色器语言的学习，可以跟着课程一边写案例，一边去学习，这样更容易理解。")]),a._v(" "),r("p",[a._v("着色器语言用于计算机图形编程，运行在 GPU 中，平时所说的大多数语言编写的程序都是运行在 CPU 中。 与 OpenGL API 相配合的是着色器语言 GLSL，与 OpenGL ES API、WebGL API 相互配合的是着色器语言 GLSL ES。OpenGL 标准应用的是客户端 OpenGL ES 应用的是移动端，WebGL 标准应用的是浏览器平台。")]),a._v(" "),r("p",[a._v("顶点着色器和片元着色器经过 WebGL 编译处理后，会在 GPU 的顶点着色器单元和片元着色器单元上执行。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//顶点着色器定义了顶点的渲染位置和点的渲染像素大小\n//顶点着色器源码\nvar vertexShaderSource = '' +\n    'void main(){' +\n    //给内置变量gl_PointSize赋值像素大小\n    '   gl_PointSize=20.0;' +\n    //顶点位置，位于坐标原点\n    '   gl_Position =vec4(0.0,0.0,0.0,1.0);' +\n    '}';\n\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//片元着色器定义了点的渲染结果像素的颜色值\n//片元着色器源码\nvar fragShaderSource = '' +\n    'void main(){' +\n    //定义片元颜色\n    '   gl_FragColor = vec4(1.0,0.0,0.0,1.0);' +\n    '}';\n")])])]),r("h3",{attrs:{id:"webgl-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#webgl-api"}},[a._v("#")]),a._v(" WebGL API")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("一句话来描述，WebGL API 指的就是 gl=canvas.getContext('webgl')返回对象 gl 的一系列绘制渲染方法，通过 WebGL API 可以把一个三维场景绘制渲染出来。比如上面代码中 gl.createShader()、gl.shaderSource()、gl.drawArrays()等方法就是 WebGl API。")])]),a._v(" "),r("li",[r("p",[a._v("sWebGL API 多数与 GPU 硬件相关，控制相关图形处理单元，比如说通过 gl.createShader()、gl.shaderSource()等方法可以对着色器代码进行编译，然后在 GPU 的着色器单元上执行；比如说 drawArrays 不执行，GPU 渲染管线的顶点、片元着色器是不会把顶点坐标转化为显示器上的像素显示出来。")])])]),a._v(" "),r("h3",{attrs:{id:"初始化着色器函数-initshader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初始化着色器函数-initshader"}},[a._v("#")]),a._v(" 初始化着色器函数 initShader()")]),a._v(" "),r("ul",[r("li",[r("p",[a._v("关于着色器函数 initShader()中封装的 WebGL API 代码，案例代码中都进行了注释，可以先简单阅读一下，具体的细节可以先不去学习，当成一个黑箱处理，你只需要知道通过 initShader()函数可以完成着色器代码的编译，然后在 GPU 上执行。")])]),a._v(" "),r("li",[r("p",[a._v("初始化着色器函数 initShader()，主要是把顶点着色器源代码 vertexShaderSource， 片元着色器源代码 fragShaderSource，进行编译处理，然后顶点着色器代码在 GPU 的顶点着色器单元执行，片元着色器代码在 GPU 的片元着色器单元执行。")])])]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//声明初始化着色器函数\nfunction initShader(gl,vertexShaderSource,fragmentShaderSource){\n    //创建顶点着色器对象\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    //创建片元着色器对象\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    //引入顶点、片元着色器源代码\n    gl.shaderSource(vertexShader,vertexShaderSource);\n    gl.shaderSource(fragmentShader,fragmentShaderSource);\n    //编译顶点、片元着色器\n    gl.compileShader(vertexShader);\n    gl.compileShader(fragmentShader);\n\n    //创建程序对象program\n    var program = gl.createProgram();\n    //附着顶点着色器和片元着色器到program\n    gl.attachShader(program,vertexShader);\n    gl.attachShader(program,fragmentShader);\n    //链接program\n    gl.linkProgram(program);\n    //使用program\n    gl.useProgram(program);\n    //返回程序program对象\n    return program;\n}\n\n")])])]),r("h3",{attrs:{id:"绘制方法-gl-drawarrays"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#绘制方法-gl-drawarrays"}},[a._v("#")]),a._v(" 绘制方法 gl.drawArrays()")]),a._v(" "),r("ul",[r("li",[a._v("gl.drawArrays()方法的作用就是通知 GPU 执行着色器代码，然后根据着色器代码在 Canvas 画布上进行渲染绘制。")])]),a._v(" "),r("h3",{attrs:{id:"着色器代码放在-script-标签中"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#着色器代码放在-script-标签中"}},[a._v("#")]),a._v(" 着色器代码放在 script 标签中")]),a._v(" "),r("ul",[r("li",[a._v("WebGL 着色器代码在 JavaScript 中以字符串的形式存在，编写代码比较麻烦，为了编写方便，可以把着色器代码写在 script 或者其他 HTML 元素标签中，然后通过元素.innerText 属性获得元素中的字符串，也就是着色器的代码。")])]),a._v(" "),r("p",[a._v("在原来 WebGL 绘制一个点的代码基础上进行更改")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v('\x3c!-- 顶点着色器源码 --\x3e\n<script id="vertexShader" type="x-shader/x-vertex">\n  void main() {\n    //给内置变量gl_PointSize赋值像素大小\n    gl_PointSize=20.0;\n    //顶点位置，位于坐标原点\n    gl_Position =vec4(0.0,0.0,0.0,1.0);\n  }\n<\/script>\n\x3c!-- 片元着色器源码 --\x3e\n<script id="fragmentShader" type="x-shader/x-fragment">\n  void main() {\n    gl_FragColor = vec4(1.0,0.0,0.0,1.0);\n  }\n<\/script>\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//顶点着色器源码\nvar vertexShaderSource = document.getElementById('vertexShader').innerText;\n//片元着色器源码\nvar fragShaderSource = document.getElementById('fragmentShader').innerText;\n//初始化着色器\nvar program = initShader(gl,vertexShaderSource,fragShaderSource);\n")])])]),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),r("p",[r("a",{attrs:{href:"http://www.yanhuangxueyuan.com/WebGL/",target:"_blank",rel:"noopener noreferrer"}},[a._v("WebGL 零基础入门教程"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=n.exports}}]);